#code-to-submit.py



import numpy
import cv
import pygame
import pygame.camera
import random

pygame.mixer.pre_init()
pygame.init()
pygame.camera.init()
pygame.mixer.init(frequency=22050, size=-16, channels=2, buffer=4096)

snare = pygame.mixer.Sound("E_SNARE_02.wav")
tom1 = pygame.mixer.Sound("tomtomdrum7.wav")
tom2 = pygame.mixer.Sound("tomtomdrum6.wav")
hihat = pygame.mixer.Sound("hihat22.wav")
synchNoise = pygame.mixer.Sound("cowbell9.wav")
based = pygame.mixer.Sound("01-Based-Is-How-You-Feel-Inside.wav")
over = pygame.mixer.Sound("vegetaover9000.wav")
bonzo = pygame.mixer.Sound("Led-Zeppelin-Coda-Bonzo's-Montreux.wav")
yyz = pygame.mixer.Sound("Rush-yyz.wav")

tom2Coords = (50, 450, 350, 650)
tom1Coords = (375, 500, 675, 700)
snareCoords = (700, 500, 1000, 700)
hihatCoords = (900, 200, 1250, 400)

# opencv stuff
CAMERA_INDEX = 0
capture = cv.CaptureFromCAM(CAMERA_INDEX)
sampleFrame = cv.QueryFrame(capture)
imageSize = cv.GetSize(sampleFrame)
imageSize = 1280, 720






class Stick(object):
    def __init__(self, color):
        self.frame = cv.QueryFrame(capture)
        self.color = color
        self.imageSize = cv.GetSize(self.frame)
        self.channels3 = cv.CreateImage(self.imageSize, 8, 3)
        self.channels1 = cv.CreateImage(self.imageSize, 8, 1)
        if self.color == "red":
            self.hueRange = (110, 140, 110, 140)
        elif self.color == "blue":
            self.hueRange = (165, 180, 0, 15)
        self.rectPoints = (0, 0, 0, 0)
        self.last50Centers = [(0,0)]*50
        self.wasInSnare = False
        self.wasInTom1 = False
        self.wasInTom2 = False
        self.wasInHihat = False

        

        

    def findRectPoints(self, oldRectPoints):
        hueRange = self.hueRange
        clone = cv.CloneImage(self.frame)
        hsv = cv.CloneImage(self.channels3)
        threshold = cv.CloneImage(self.channels1)
        threshold2 = cv.CloneImage(self.channels1)
        
        cv.CvtColor(clone, hsv, cv.CV_RGB2HSV)
        cv.InRangeS(hsv, (hueRange[0], 80, 80), (hueRange[1], 255, 255),
                   threshold)
        cv.InRangeS(hsv, (hueRange[2], 80, 80), (hueRange[3], 255, 255),
                    threshold2)
        cv.Add(threshold, threshold2, threshold)
        cv.Erode(threshold, threshold, iterations = 5)
        cv.Dilate(threshold, threshold, iterations = 5)
        
        cv.ShowImage(self.color, threshold)

        memory = cv.CreateMemStorage(0)
        clone2 = cv.CloneImage(threshold)
        contours = cv.FindContours(clone2, memory,
                                   cv.CV_RETR_LIST,
                                   cv.CV_CHAIN_APPROX_SIMPLE,
                                   (0, 0) )
        if not contours:
            rectPoints = oldRectPoints
        else:
            rectPoints = cv.BoundingRect(list(contours))
        return rectPoints

    def findCenterRadius(self):
        self.rectPoints = self.findRectPoints(self.rectPoints)
        left, top, width, height = self.rectPoints
        center = (int(left + float(width)/2),
                  int(top + float(height)/2))
        radius = int(float(height)/2)
        return center, radius

    def drawBoundingCircle(self, frame):
        center, radius = self.findCenterRadius()
        if self.color == "red":
            circleColor = (0, 0, 255)
        elif self.color == "blue":
            circleColor = (255, 0, 0)
        cv.Circle(frame, center, radius,
                  circleColor , 8, 0)

    def appendCentersList(self):
        # Note: this is where I update the current center too
        self.center = self.findCenterRadius()[0]
        self.last50Centers.pop(0)
        self.last50Centers.append(self.center)

    def snareHit(self):
        center = self.center
        if self.inDrumZone(center, "snare"):
            if self.wasInSnare == False:
                self.wasInSnare = True
                return True
            else:
                return False
        else:
            self.wasInSnare = False
            return False

    def tom1Hit(self):
        center = self.center
        if self.inDrumZone(center, "tom1"):
            if self.wasInTom1 == False:
                self.wasInTom1 = True
                return True
            else:
                return False
        else:
            self.wasInTom1 = False
            return False

    def tom2Hit(self):
        center = self.center
        if self.inDrumZone(center, "tom2"):
            if self.wasInTom2 == False:
                self.wasInTom2 = True
                return True
            else:
                return False
        else:
            self.wasInTom2 = False
            return False

    def hihatHit(self):
        center = self.center
        if self.inDrumZone(center, "hihat"):
            if self.wasInHihat == False:
                self.wasInHihat = True
                return True
            else:
                return False
        else:
            self.wasInHihat = False
            return False


    def inDrumZone(self, center, drum):
        if drum == "tom2":
            if (center[0] > tom2Coords[0] and center[1] > tom2Coords[1] and
                center[0] < tom2Coords[2] and center[1] < tom2Coords[3]):
                return True
            else:
                return False
        elif drum == "tom1":
            if (center[0] > tom1Coords[0] and center[1] > tom1Coords[1] and
                center[0] < tom1Coords[2] and center[1] < tom1Coords[3]):
                return True
            else:
                return False
        elif drum == "snare":
            if (center[0] > snareCoords[0] and center[1] > snareCoords[1] and
                center[0] < snareCoords[2] and center[1] < snareCoords[3]):
                return True
            else:
                return False
        elif drum == "hihat":
            if (center[0] > hihatCoords[0] and center[1] > hihatCoords[1] and
                center [0] < hihatCoords[2] and center[1] < hihatCoords[3]):
                return True
            else:
                return False
            
        
    def playSounds(self):
        if self.snareHit():
            self.snareH = True
            self.lastDrumHitCenter = self.center
            loudness = self.determineVolume()
            snare.set_volume(loudness)
            snare.play()
        elif self.tom1Hit():
            self.tom1H = True
            self.lastDrumHitCenter = self.center
            loudness = self.determineVolume()
            tom1.set_volume(loudness)
            tom1.play()
        elif self.tom2Hit():
            self.tom2H = True
            self.lastDrumHitCenter = self.center
            loudness = self.determineVolume()
            tom2.set_volume(loudness)
            tom2.play()
        elif self.hihatHit():
            self.hihatH = True
            self.lastDrumHitCenter = self.center
            loudness = self.determineVolume()
            hihat.set_volume(loudness)
            hihat.play()


    def determineVolume(self):
        delta = abs(self.last50Centers[-1][0] - self.last50Centers[-2][0])
        print delta
        volumeConstant = float(delta)/1
        if volumeConstant > 1.0:
            volumeConstant = 1.0
        return volumeConstant
        
        



class App(object):
    def __init__(self):
        self.startScreen = pygame.display.set_mode(imageSize, 0)
        self.redStick = Stick("red")
        self.blueStick = Stick("blue")
        self.currentHelpScreen = 1
        self.videoFont = cv.InitFont(cv.CV_FONT_HERSHEY_SIMPLEX, 1, 1,
                                     0, 3, 8)
        self.xFont = 800
        self.yFont = 50

        self.tom2Coords = (50, 450, 350, 650)
        self.tom1Coords = (375, 500, 675, 700)
        self.snareCoords = (700, 500, 1000, 700)
        self.hihatCoords = (900, 200, 1250, 400)

    def startApp(self):
        pygame.display.set_caption("DrumMaster 9000!")
        randSong = random.randint(0, 2)
        self.songs = [based, bonzo, yyz]
        subtextFont = pygame.font.SysFont("Cambria", 36)
        basedText = subtextFont.render("Based Is How You Feel Inside",
                                     True, (0, 0, 0))
        basedBandText = subtextFont.render("BADBADNOTGOOD",
                                     True, (0, 0, 0))
        bonzoText = subtextFont.render("Bonzo's Montreux (Moby Dick)",
                                     True, (0, 0, 0))
        bonzoBandText = subtextFont.render("Led Zeppelin",
                                     True, (0, 0, 0))
        yyzText = subtextFont.render("YYZ", True, (0, 0, 0))
        yyzBandText = subtextFont.render("Rush", True, (0, 0, 0))
        self.nowPlaying = subtextFont.render("Now Playing:", True, (0, 0, 0))
        self.songTexts = [basedText, bonzoText, yyzText]
        self.bandTexts = [basedBandText, bonzoBandText, yyzBandText]
        self.currentSongIndex = randSong
        self.mainScreen()


    def changeSong(self, index):
        self.currentSongIndex = index
        pygame.mixer.stop()
        pygame.draw.rect(self.startScreen, (255, 255, 255), (25, 250, 400, 200))
        self.startScreen.blit(self.nowPlaying, (50, 300))
        self.startScreen.blit(self.songTexts[index], (50, 350))
        self.startScreen.blit(self.bandTexts[index], (50, 400))
        self.songs[index].play()
        

    def mainScreen(self):
        screen = self.startScreen
        whiteDrums = pygame.image.load("/Users/mojoz0/Documents/term-project/whiteDrums.jpg")
        whiteDrums = pygame.transform.scale(whiteDrums, (425, 300))
        musicFont = pygame.font.SysFont("Cambria", 36)
        whiteMain = pygame.image.load("/Users/mojoz0/Documents/term-project/mainscreen.bmp")
        blueMain = pygame.image.load("/Users/mojoz0/Documents/term-project/main-screen02.bmp")
        redMain = pygame.image.load("/Users/mojoz0/Documents/term-project/main-screen03.bmp")
        purpleMain = pygame.image.load("/Users/mojoz0/Documents/term-project/main-screen01.bmp")
        screen.blit(whiteMain, (0, 0))
        screen.blit(whiteDrums, (450, 100))
        screen.blit(self.nowPlaying, (50, 300))
        screenColor = 0
        screenColors = [whiteMain, blueMain, redMain, purpleMain]
        self.changeSong(self.currentSongIndex)
        over.play()
        while True:
            pygame.time.delay(200)
            screen.blit(screenColors[screenColor], (0, 0))
            screen.blit(whiteDrums, (450, 125))
            pygame.draw.rect(self.startScreen, (255, 255, 255), (25, 250, 400, 200))
            self.startScreen.blit(self.nowPlaying, (50, 300))
            self.startScreen.blit(self.songTexts[self.currentSongIndex],
                                  (50, 350))
            self.startScreen.blit(self.bandTexts[self.currentSongIndex],
                                  (50, 400))
            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_1:
                        self.changeSong(0)
                    elif event.key == pygame.K_2:
                        self.changeSong(1)
                    elif event.key == pygame.K_3:
                        self.changeSong(2)
                    elif event.key == pygame.K_h:
                        self.runHelpScreen()
                    else:
                        pygame.mixer.stop()
                        pygame.display.quit()
                        self.runVideo()
            pygame.display.flip()
            screenColor += 1
            screenColor %= 4


    def runHelpScreen(self):
        screen = self.startScreen
        helpScreen1 = pygame.image.load("/Users/mojoz0/Documents/term-project/help-screen1.bmp")
        helpScreen2 = pygame.image.load("/Users/mojoz0/Documents/term-project/help-screen2.bmp")
        helpScreen3 = pygame.image.load("/Users/mojoz0/Documents/term-project/help-screen3.bmp")
        sticksDemo = pygame.image.load("/Users/mojoz0/Documents/term-project/redbluesticks.jpg")
        sticksDemo = pygame.transform.scale(sticksDemo, (350, 250))
        drumsDemo = pygame.image.load("/Users/mojoz0/Documents/term-project/drumDemo.jpg")
        drumsDemo = pygame.transform.scale(drumsDemo, (750, 450))
        smallHit = pygame.image.load("/Users/mojoz0/Documents/term-project/smallHit.png")
        smallHit = pygame.transform.scale(smallHit, (300, 300))
        largeHit = pygame.image.load("/Users/mojoz0/Documents/term-project/largeHit.png")
        largeHit = pygame.transform.scale(largeHit, (300, 300))
        helpSurface = pygame.Surface((imageSize[0], imageSize[1]))
        if self.currentHelpScreen == 1:
            screen.blit(helpScreen1, (0, 0))
            screen.blit(sticksDemo, (450, 200))
        elif self.currentHelpScreen == 2:
            screen.blit(helpScreen2, (0, 0))
            screen.blit(drumsDemo, (300, 200))
        elif self.currentHelpScreen == 3:
            screen.blit(helpScreen3, (0, 0))
            screen.blit(smallHit, (250, 175))
            screen.blit(largeHit, (600, 175))
        while True:
            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    self.currentHelpScreen += 1
                    if self.currentHelpScreen == 4:
                        self.currentHelpScreen = 1
                        self.mainScreen()
                    self.runHelpScreen()
            pygame.display.flip()

                



        
    def runVideo(self):
        frameCount = 0
        x = self.xFont
        y = self.yFont
        font = self.videoFont
        tom2Coords = self.tom2Coords
        tom1Coords = self.tom1Coords
        snareCoords = self.snareCoords
        hihatCoords = self.hihatCoords
        

        i = 2
        
        while True:
            if i %2 == 0:
                frame = cv.QueryFrame(capture)
                
                self.redStick.drawBoundingCircle(frame)
                self.blueStick.drawBoundingCircle(frame)

                self.redStick.appendCentersList()
                self.blueStick.appendCentersList()

                self.redStick.playSounds()
                self.blueStick.playSounds()

                cv.Rectangle(frame, (tom1Coords[0], tom1Coords[1]),
                             (tom1Coords[2], tom1Coords[3]), (255, 0, 0), 0)

                cv.Rectangle(frame, (tom2Coords[0], tom2Coords[1]),
                             (tom2Coords[2], tom2Coords[3]), (0, 255, 0), 0)

                cv.Rectangle(frame, (snareCoords[0], snareCoords[1]),
                             (snareCoords[2], snareCoords[3]), (0, 0, 255), 0)

                cv.Rectangle(frame, (hihatCoords[0], hihatCoords[1]),
                             (hihatCoords[2], hihatCoords[3]), (125, 125, 0), 0)

                cv.Flip(frame,frame, 1)
                cv.PutText(frame, "Press q or esc to terminate.", (x, y),
                           font, (0, 0, 255))
                cv.ShowImage("DrumMaster 9000!", frame)
                key = cv.WaitKey(7)
                if key == 27 or key == 113:
                    cv.DestroyAllWindows()
                    pygame.quit()
                    exit()
                    break
                frameCount += 1

#runVideo()
drums = App()
drums.startApp()

            
